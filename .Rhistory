text(-2.9,0.6, 'Directional-Disruptive', pos = 3, col = line.col[5])
plot(c(-4,4), c(0,1), col=NA, xlab = NA, ylab = NA, xaxt = 'n', yaxt = 'n')
lines(c(-4,4), c(0.9,0.9), lwd = 1.5, col = line.col[1])
lines(x, hx, lwd = 1.5, col = line.col[2])
lines(x, hy, lwd = 1.5, col = line.col[3])
lines(x, hz, lwd = 1.5, col = line.col[4])
lines(x, ha, lwd = 1.5, col = line.col[5])
text(0, 0.9, 'Initial Species (Trait) Pool', pos = 3, col = line.col[1])
text(0, 0.4, 'Stabilizing', pos = 3, col = line.col[2])
text(3, 0.7, 'Directional', pos = 2, col = line.col[3])
text(-3.45, 0.15, 'Disruptive', pos = 3, col = line.col[4])
text(-2.9,0.6, 'Directional-Disruptive', pos = 3, col = line.col[5])
library(rgdal)
library(rgeos)
library(maptools)
library(raster)
GBIF_thinned=read.csv('//minim.hpc.nau.edu/scratch/bjb329/niche_models/WesternRiparian/HYDROCLIMATIC_NICHE_MODELS/03_Thinning/GBIF_thinned_RPU_v2.csv',row.names=1)
print('check2')
GBIF_thinned.VPU=as.numeric(substr(GBIF_thinned$NHDPlus.RPU,1,2))
print('check3')
VPU.10L=c(1:nrow(GBIF_thinned))[GBIF_thinned$NHDPlus.RPU=='10a'|GBIF_thinned$NHDPlus.RPU=='10b'|GBIF_thinned$NHDPlus.RPU=='10c'|GBIF_thinned$NHDPlus.RPU=='10d']
VPU.10U=c(1:nrow(GBIF_thinned))[GBIF_thinned$NHDPlus.RPU=='10e'|GBIF_thinned$NHDPlus.RPU=='10f'|GBIF_thinned$NHDPlus.RPU=='10g'|GBIF_thinned$NHDPlus.RPU=='10h'|GBIF_thinned$NHDPlus.RPU=='10i']
GBIF_thinned.VPU[VPU.10L]=9
GBIF_thinned.VPU[VPU.10U]=10
#Begin dividing into VPUs
job_subset <- vector()
for (i in 1:length(table(GBIF_thinned.VPU))){
length.i <- ceiling(table(GBIF_thinned.VPU)[i]/1000)
out.i <- cbind(rep(as.numeric(names(table(GBIF_thinned.VPU)[i])),length.i),seq(1,1000*(length.i-1)+1,by=1000),seq(1000,1000*length.i,by=1000))
out.i[nrow(out.i),3] <- as.numeric(table(GBIF_thinned.VPU)[i])
job_subset <- rbind(job_subset,out.i)
}
GBIF_thinned=read.csv('//minim.hpc.nau.edu/scratch/bjb329/niche_models/WesternRiparian/HYDROCLIMATIC_NICHE_MODELS/03_Thinning/GBIF_thinned_RPU_v2.csv',row.names=1)
test=read.csv('//minim.hpc.nau.edu/scratch/bjb329/niche_models/WesternRiparian/HYDROCLIMATIC_NICHE_MODELS/05_NHDPlus/NHDdataV2/1215.csv')
head(test[,1:3])
test=read.csv('//minim.hpc.nau.edu/scratch/bjb329/niche_models/WesternRiparian/HYDROCLIMATIC_NICHE_MODELS/05_NHDPlus/NHDdataV2/1216.csv')
head(test[,1:3])
test=read.table('//minim.hpc.nau.edu/scratch/bjb329/niche_models/WesternRiparian/HYDROCLIMATIC_NICHE_MODELS/05_NHDPlus/NHDdataV2/1215.csv',sep=',')
head(GBIF_thinned[,1:3])
dim(GBIF_thinned)
All_GBIF <- data.table::fread('//minim.hpc.nau.edu/scratch/bjb329/niche_models/WesternRiparian/HYDROCLIMATIC_NICHE_MODELS/02_GBIF/0043726-210914110416597.csv')
dim(All_GBIF)
is.numeric(All_GBIF$decimalLatitude)
is.numeric(All_GBIF$decimalLongitude)
test=All_GBIF[All_GBIF$scientificName=='Pentagramma triangularis (Kaulf.) Yatsk.',]
dim(test)
test=All_GBIF[All_GBIF$scientificName=='Pentagramma triangularis (Kaulf.) Yatsk. Windham & Wollenw.',]
dim(test)
test=All_GBIF[All_GBIF$scientificName=='Pentagramma triangularis (Kaulf.) Yatsk., Windham & Wollenw.',]
dim(test)
head(test[,1:10])
head(test[,10:20])
test=All_GBIF$scientificName
test1=format(test, decimal.mark = '.')
test1[All_GBIF$verbatimScientificName=='Pentagramma triangularis']
test1=sub(",",".",test)
test1[All_GBIF$verbatimScientificName=='Pentagramma triangularis']
test=All_GBIF[,c(13,22,23,7:10,24,33)]
head(test)
All_GBIF <- All_GBIF[,c(22,23,7:10,24,33)]
All_GBIF <- as.data.frame(All_GBIF)
All_GBIF <- All_GBIF[All_GBIF$species != "",]#Some records only have genus, so getting rid of them
All_GBIF <- All_GBIF[All_GBIF$coordinateUncertaintyInMeters<101,]
library(rgdal)
library(rgeos)
library(maptools)
library(raster)
bounds=readOGR('//nau.froot.nau.edu/cirrus/projects/ecogis/NHDPlus_v2/Global_data/NHDPlusV21_NHDPlusGlobalData_03/NHDPlusGlobalData','BoundaryUnit')
bounds=spTransform(bounds,"+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0")
west=unionSpatialPolygons(bounds[71:80,],rep(1,10))
install.packages('SDMtune')
install.packages('dismo')
install.packages('rgdal')
library(rgeos)
install.packages('rgeos')
library(maxnet)
?maxnet
library(SDMtune)
?randomFolds
station_precip <- c(300,200,400)
station_rkm <- c(1,100,175)
plot_rkm <- c(50,23,156,107)
i=1
station_dist <- station_rkm-plot_rkm[i]
station_dist
adjacent_station <- c(station_rkm[order(station_dist == 1)],station_rkm[order(station_dist == 2)])
adjacent_station
adjacent_station <- c(station_rkm[order(station_dist) == 1],station_rkm[order(station_dist) == 2])
adjacent_station
adjacent_precip <- c(station_precip[order(station_dist) == 1],station_prectip[order(station_dist) == 2])
adjacent_precip <- c(station_precip[order(station_dist) == 1],station_precip[order(station_dist) == 2])
adjacent_precip
?weighted.mean
adjacent_weights <- c(station_dist[order(station_dist) == 1],station_dist[order(station_dist) == 2])
adjacent_weights
weighted.mean(adjacent_precip,abs(adjacent_weights))
wtd_mn_precip <- vector()
for (i in 1:length(plot_rkm)){
station_dist <- station_rkm-plot_rkm[i]
adjacent_weights <- c(station_dist[order(station_dist) == 1],station_dist[order(station_dist) == 2])
adjacent_precip <- c(station_precip[order(station_dist) == 1],station_precip[order(station_dist) == 2])
wtd_mn_precip <- c(wtd_mn_precip,weighted.mean(adjacent_precip,abs(adjacent_weights)))
}
wtd_mn_precip
i=2
station_dist <- station_rkm-plot_rkm[i]
station_dist
adjacent_weights <- c(station_dist[order(station_dist) == 1],station_dist[order(station_dist) == 2])
adjacent_precip <- c(station_precip[order(station_dist) == 1],station_precip[order(station_dist) == 2])
adjacent_weights
adjacent_precip
weighted.mean(adjacent_precip,abs(adjacent_weights))
wtd_mn_precip <- vector()
for (i in 1:length(plot_rkm)){
station_dist <- station_rkm-plot_rkm[i]
adjacent_weights <- c(station_dist[order(station_dist) == 1],station_dist[order(station_dist) == 2])
adjacent_precip <- c(station_precip[order(station_dist) == 1],station_precip[order(station_dist) == 2])
wtd_mn_precip <- c(wtd_mn_precip,weighted.mean(adjacent_precip,abs(adjacent_weights[2:1])))
}
wtd_mn_precip
i=3
station_dist <- station_rkm-plot_rkm[i]
adjacent_weights <- c(station_dist[order(station_dist) == 1],station_dist[order(station_dist) == 2])
adjacent_precip <- c(station_precip[order(station_dist) == 1],station_precip[order(station_dist) == 2])
adjacent_weights
station_dist
order(abs(station_dist))
wtd_mn_precip <- vector()
for (i in 1:length(plot_rkm)){
station_dist <- station_rkm-plot_rkm[i]
adjacent_weights <- c(station_dist[order(abs(station_dist)) == 1],station_dist[order(abs(station_dist)) == 2])
adjacent_precip <- c(station_precip[order(abs(station_dist)) == 1],station_precip[order(abs(station_dist)) == 2])
wtd_mn_precip <- c(wtd_mn_precip,weighted.mean(adjacent_precip,abs(adjacent_weights[2:1])))
}
wtd_mn_precip
i=4
station_dist <- station_rkm-plot_rkm[i]
station_dist
order(abs(station_dist))
abs(station_dist)
order(106,7,68)
order(c(106,7,68))
?order
wtd_mn_precip <- vector()
for (i in 1:length(plot_rkm)){
station_dist <- station_rkm-plot_rkm[i]
adjacent_weights <- c(station_dist[order(abs(station_dist),decreasing=T) == 1],station_dist[order(abs(station_dist),decreasing=T) == 2])
adjacent_precip <- c(station_precip[order(abs(station_dist),decreasing=T) == 1],station_precip[order(abs(station_dist),decreasing=T) == 2])
wtd_mn_precip <- c(wtd_mn_precip,weighted.mean(adjacent_precip,abs(adjacent_weights[2:1])))
}
wtd_mn_precip
i=1
station_dist <- station_rkm-plot_rkm[i]
order(station_dist)
station_dist
order(abs(station_dist))
i=2
station_dist <- station_rkm-plot_rkm[i]
order(abs(station_dist))
i=4
station_dist <- station_rkm-plot_rkm[i]
adjacent_weights <- c(station_dist[order(abs(station_dist)) == 1],station_dist[order(abs(station_dist)) == 2])
station_dist
adjacent_weights
order(abs(station_dist))
abs(station_dist)
order(c(106,7,68))
dist(1,2)
station_dist
min(abs(station_dist))
plot_rkm[i]-station_rkm
test=plot_rkm[i]-station_rkm
order(test)
order(abs(test))
wtd_mn_precip <- vector()
for (i in 1:length(plot_rkm)){
station_dist <- station_rkm-plot_rkm[i]
adjacent_weights <- c(station_dist[order(abs(station_dist))[1]],station_dist[order(abs(station_dist))[2]])
adjacent_precip <- c(station_precip[order(abs(station_dist))[1]],station_precip[order(abs(station_dist))[2]])
wtd_mn_precip <- c(wtd_mn_precip,weighted.mean(adjacent_precip,abs(adjacent_weights[2:1])))
}
wtd_mn_precip
library(soilDB)
library(bipartite)
?bipartite
?vegan::nullmodel
library(FD)
?dbFD
dat <- read.csv('C:/Users/bjbut/OneDrive/Documents/ThumbdriveBackup/Grad_Students/Kathleen/BEF_Paper/final_data/plot_combined_values.csv')
colnames(dat)
low <- function(x){return(sort(x)[floor(0.05*length(x))])}
high <- function(x){return(sort(x)[ceiling(0.95*length(x))])}
aggregate(weed_cover,list(site),mean,data=dat)
aggregate(dat$weed_cover,list(dat$site),mean)
aggregate(dat$weed_cover,list(dat$site),low)
aggregate(dat$weed_cover,list(dat$site),high)
mn <- aggregate(dat$weed_cover,list(dat$site),mean)
lo <- aggregate(dat$weed_cover,list(dat$site),low)
hi <- aggregate(dat$weed_cover,list(dat$site),high)
cbind(lo,mn,hi)
library(maxnet)
cite('maxnet')
cite(maxnet)
?cite
citation('maxnet')
library(SMDtune)
install.packages('SDMtune')
citation("SDMtune")
38+18
10^0
0^10
1^10
2^10
10^1
10^2
10^3
76/500
1000/122
122/1000
151/1500
.84*60
142/48
132/46
127/26
98/56
71/26
60/35
33/19
11/6
10/0
8/2
4/0
3/0
3/1
2/1
2/1
NA
1/3
3775/721
269300/35261
3.68/3.52
31.76/23.2
31.2/23.2
3.68/5.52
3.68/3.52
298970+43000+404648+490378+278358+179459+278561+11750+18303+60000+35000+2450+785
install.packages('sqldf')
library(sqldf)
sport <- read.csv('C:/Users/bjbut/OneDrive/Documents/ThumbdriveBackup/Coursera/SQL/Capstone_data/athlete_events.csv')
sqldf('SELECT * FROM sport')
dim(sport)
sqldf('SELECT * FROM sport LIMIT 10')
sqldf('SELECT * FROM sport LIMIT 10')
sqldf('SELECT * FROM sport LIMIT 10')
sqldf('SELECT COUNT(*) FROM sport LIMIT)
sqldf('SELECT COUNT(*) FROM sport LIMIT)'
sqldf('SELECT COUNT(*) FROM sport')
sqldf('SELECT COUNT(UNIQUE(Name)) FROM sport')
sqldf('SELECT UNIQUE(Name) FROM sport')
sqldf('SELECT COUNT UNIQUE Name FROM sport')
sqldf('SELECT COUNT * FROM sport')
sqldf('SELECT COUNT(DISTINCT(Name)) FROM sport')
sqldf('SELECT COUNT(DISTINCT(NOC)) FROM sport')
sqldf('SELECT MIN Year,
MAX Year
FROM sport')
sqldf('SELECT MIN(Year),
MAX(Year)
FROM sport')
sqldf('SELECT COUNT(*)
FROM sport
GROUP BY NOC')
sqldf('SELECT NOC,
COUNT(*) AS athl_per_noc
FROM sport
GROUP BY NOC
ORDER BY athl_per_noc')
sqldf('SELECT COUNT(DISTINCT(NOC))
FROM sport')
sqldf('SELECT NOC,
COUNT(*) AS athl_per_noc
FROM sport
GROUP BY NOC
ORDER BY athl_per_noc')
freq <- sqldf('SELECT NOC,
COUNT(*) AS athl_per_noc
FROM sport
GROUP BY NOC
ORDER BY athl_per_noc')
head(freq)
plot(1:nrow(freq),freq$athl_per_noc)
sqldf('SELECT NOC,
COUNT(*) AS athl_per_noc
FROM sport
GROUP BY NOC
ORDER BY athl_per_noc DESC')
sqldf('SELECT NOC,
COUNT(*) AS athl_per_noc
FROM sport
GROUP BY NOC
ORDER BY athl_per_noc DESC
LIMIT 10')
sqldf('SELECT *
FROM sport
LIMIT 10')
sqldf('SELECT MIN(Year),
MAX(Year)
FROM sport')
sqldf('SELECT COUNT(*)
FROM sport')
sqldf('SELECT COUNT(DISTINCT(Name))
FROM sport')
sqldf('SELECT COUNT(DISTINCT(NOC))
FROM sport')
sqldf('SELECT NOC,
COUNT(*) AS athl_per_noc
FROM sport
GROUP BY NOC
ORDER BY athl_per_noc DESC
LIMIT 10')
freq <- sqldf('SELECT NOC,
COUNT(*) AS athl_per_noc
FROM sport
GROUP BY NOC
ORDER BY athl_per_noc')
plot(1:nrow(freq),freq$athl_per_noc)
freq <- sqldf('SELECT NOC,
COUNT(*) AS athl_per_noc
FROM sport
GROUP BY NOC
ORDER BY athl_per_noc DESC')
plot(1:nrow(freq),freq$athl_per_noc,xlab = 'NOC by Rank Order',ylab = 'Number of Athletes')
plot(1:nrow(freq),log10(freq$athl_per_noc),xlab = 'NOC by Rank Order',ylab = 'Number of Athletes')
hist(freq$athl_per_noc)
hist(log10(freq$athl_per_noc))
#plot(1:nrow(freq),freq$athl_per_noc,xlab = 'NOC by Rank Order',ylab = 'Number of Athletes')
hist(freq$athl_per_noc,xlab = 'Number of Records per NOC',main = 'Untransformed')
hist(log10(freq$athl_per_noc),xlab = 'log10(Number of Records) per NOC',main = 'Log-transformed')
#plot(1:nrow(freq),freq$athl_per_noc,xlab = 'NOC by Rank Order',ylab = 'Number of Athletes')
hist(freq$athl_per_noc,xlab = 'Number of Records per NOC',main = 'Untransformed')
hist(log10(freq$athl_per_noc),xlab = 'log10(Number of Records) per NOC',main = 'Log-transformed')
head(sport)
sport([,1:5],1:100)
sport[,1:5,1:100]
sport[1:100,1:5]
sport[sport$Name ==  'Pirjo Hannele Mattila']
sport[sport$Name ==  'Agnes Erika Eyde']
sport[sport$Name ==  'Pirjo Hannele Mattila',]
sport[sport$Name ==  'Agnes Erika Eyde',]
sport[sport$Name ==  'Cornelia "Cor" Strannood',]
sport[sport$Name ==  'Cornelia "Cor" Alten-Strannood',]
head(sport)
table(sport$ID,sport$Name)
test=tapply(sport$Name,list(sport$ID),length)
length(test)
max(test)
sort(test)
sort(test,decreasing = T)
sport[sport$ID == 77710,]
testfxn <- function(x){return(length(table(x)))}
test=tapply(sport$Name,list(sport$ID),testfxn)
max(test)
head(sport)
colnames9sport
colnames(sport)
sport[,c(9,11)]
head(sport)
test=sport[sport$Year == 1896,]
head(test)
table(test$Sex)
table(sport$Year,sport$Sex)
test=table(sport$Year,sport$Sex)
plot(rownames(test),test[,2])
points(rownames(test),test[,1],col='red')
gs_data <-
f
setwd('C:/Users/bjbut/OneDrive/Documents/GitHub/GCMRC_HydroNicheExpt_2022')
gs_dat <- read.csv('Stomatal_Conductance_Data.csv')
head(gs_dat)
boxplot(Conductance ~ Species, data = gs_dat)
min(gs_dat[is.numeric(gs_dat)])
gs_dat[is.numeric(gs_dat)]
gs_dat$Conductance[is.numeric(gs_dat$Conductance)]
gs_dat$Conductance[gs_dat$Conductance == 'Dead'] <- NA
is.numeric(gs_dat$Conductance)
gs_dat <- read.csv('Stomatal_Conductance_Data.csv')#reading in stomatal conductance data
hist(gs_dat$Conductance)
gs_dat$Conductance[is.na(gs_dat$Conductance)] <- min(gs_dat$Conductance,na.rm=T)
hist(gs_dat$Conductance)
boxplot(Conductance ~ Species, data = gs_dat)
#creating a new treatment variable
gs_dat$Rx <- vector()
#creating a new treatment variable
gs_dat$Rx <- vector(,length = nrow(gs_dat))
gs_dat$Bin
gs_dat$Rx[gs_dat$Bin == c('A','D','G','J','M')] <- 'Drought'
gs_dat$Rx[gs_dat$Bin == 'A' | 'D' | 'G' | 'J' | 'M')] <- 'Drought'
gs_dat$Rx[gs_dat$Bin == 'A' | 'D' | 'G' | 'J' | 'M'] <- 'Drought'
gs_dat$Rx[gs_dat$Bin == 'A' | gs_dat$Bin == 'D' | gs_dat$Bin == 'G' | gs_dat$Bin == 'J' | gs_dat$Bin == 'M'] <- 'Drought'
gs_dat$Rx[gs_dat$Bin == 'B' | gs_dat$Bin == 'E' | gs_dat$Bin == 'H' | gs_dat$Bin == 'K' | gs_dat$Bin == 'N'] <- 'Control'
gs_dat$Rx[gs_dat$Bin == 'C' | gs_dat$Bin == 'F' | gs_dat$Bin == 'I' | gs_dat$Bin == 'L' | gs_dat$Bin == '0'] <- 'Flood'
head(gs_dat)
boxplot(Conductance ~ Species*Rx, data = gs_dat)
gs_dat$Rx
gs_dat[190:200,]
gs_dat$Rx[gs_dat$Bin == 'C' | gs_dat$Bin == 'F' | gs_dat$Bin == 'I' | gs_dat$Bin == 'L' | gs_dat$Bin == 'O'] <- 'Flood'
gs_dat[190:200,]
boxplot(Conductance ~ Species*Rx, data = gs_dat)
plot(gs_dat$Time,gs_dat$Leaf.Temp)
time(gs_dat$Time)
as.POSIXlt(gs_dat$Rx)
head(gs_dat)
gs_dat$Time
gs_dat$Leaf.Temp
gs_dat <- read.csv('Stomatal_Conductance_Data.csv')#reading in stomatal conductance data
#setting gs values of dead plants (NAs) to the minimum measured conductance
gs_dat$Conductance[is.na(gs_dat$Conductance)] <- min(gs_dat$Conductance,na.rm=T)
#creating a new treatment variable
gs_dat$Rx <- vector(,length = nrow(gs_dat))
gs_dat$Rx[gs_dat$Bin == 'A' | gs_dat$Bin == 'D' | gs_dat$Bin == 'G' | gs_dat$Bin == 'J' | gs_dat$Bin == 'M'] <- 'Drought'
gs_dat$Rx[gs_dat$Bin == 'B' | gs_dat$Bin == 'E' | gs_dat$Bin == 'H' | gs_dat$Bin == 'K' | gs_dat$Bin == 'N'] <- 'Control'
gs_dat$Rx[gs_dat$Bin == 'C' | gs_dat$Bin == 'F' | gs_dat$Bin == 'I' | gs_dat$Bin == 'L' | gs_dat$Bin == 'O'] <- 'Flood'
#quick visualizations
boxplot(Conductance ~ Species, data = gs_dat)
boxplot(Conductance ~ Species*Rx, data = gs_dat)
#converting time data to numeric
as.POSIXct(gs_dat$Time)
#converting time data to numeric
test <- '2022-06-28 8:00'
as.POSIXct(test)
as.numeric(as.POSIXct(test))
gs_dat <- read.csv('Stomatal_Conductance_Data.csv')#reading in stomatal conductance data
#setting gs values of dead plants (NAs) to the minimum measured conductance
gs_dat$Conductance[is.na(gs_dat$Conductance)] <- min(gs_dat$Conductance,na.rm=T)
#converting time data to numeric
dt <- paste(gs_dat$Date, gs_dat$Time, sep = ' ')
head(dt)
dt <- as.numeric(as.POSIXct(dt))
dt
dt <- dt-min(dt)
dt
plot(c(1:length(dt)),dt)
gs_dat$dt <- dt
head(gs_dat)
gs_dat$Rx <- vector(,length = nrow(gs_dat))
gs_dat$Rx[gs_dat$Bin == 'A' | gs_dat$Bin == 'D' | gs_dat$Bin == 'G' | gs_dat$Bin == 'J' | gs_dat$Bin == 'M'] <- 'Drought'
gs_dat$Rx[gs_dat$Bin == 'B' | gs_dat$Bin == 'E' | gs_dat$Bin == 'H' | gs_dat$Bin == 'K' | gs_dat$Bin == 'N'] <- 'Control'
gs_dat$Rx[gs_dat$Bin == 'C' | gs_dat$Bin == 'F' | gs_dat$Bin == 'I' | gs_dat$Bin == 'L' | gs_dat$Bin == 'O'] <- 'Flood'
#creating a new treatment variable
Rx <- vector(NA,length = nrow(gs_dat))
#creating a new treatment variable
Rx <- rep(NA,nrow(gs_dat))
Rx[gs_dat$Bin == 'A' | gs_dat$Bin == 'D' | gs_dat$Bin == 'G' | gs_dat$Bin == 'J' | gs_dat$Bin == 'M'] <- 'Drought'
Rx[gs_dat$Bin == 'B' | gs_dat$Bin == 'E' | gs_dat$Bin == 'H' | gs_dat$Bin == 'K' | gs_dat$Bin == 'N'] <- 'Control'
Rx[gs_dat$Bin == 'C' | gs_dat$Bin == 'F' | gs_dat$Bin == 'I' | gs_dat$Bin == 'L' | gs_dat$Bin == 'O'] <- 'Flood'
gs_dat <- read.csv('Stomatal_Conductance_Data.csv')#reading in stomatal conductance data
#setting gs values of dead plants (NAs) to the minimum measured conductance
gs_dat$Conductance[is.na(gs_dat$Conductance)] <- min(gs_dat$Conductance,na.rm=T)
#converting time data to numeric, where the first measurement is time zero, and subsequent measurements are seconds after zero
dt <- paste(gs_dat$Date, gs_dat$Time, sep = ' ')
dt <- as.numeric(as.POSIXct(dt))
dt <- dt-min(dt)
gs_dat$dt <- dt
#creating a new treatment variable
Rx <- rep(NA,nrow(gs_dat))
Rx[gs_dat$Bin == 'A' | gs_dat$Bin == 'D' | gs_dat$Bin == 'G' | gs_dat$Bin == 'J' | gs_dat$Bin == 'M'] <- 'Drought'
Rx[gs_dat$Bin == 'B' | gs_dat$Bin == 'E' | gs_dat$Bin == 'H' | gs_dat$Bin == 'K' | gs_dat$Bin == 'N'] <- 'Control'
Rx[gs_dat$Bin == 'C' | gs_dat$Bin == 'F' | gs_dat$Bin == 'I' | gs_dat$Bin == 'L' | gs_dat$Bin == 'O'] <- 'Flood'
gs_dat$Rx <- Rx
head(gs_dat)
#quick visualizations
boxplot(Conductance ~ Species, data = gs_dat)
boxplot(Conductance ~ Species*Rx, data = gs_dat)
#mixed effects models to account for repeated measures, nested design (bin as random effect), and leaf temperature
library(lme4)
gs_dat <- read.csv('Stomatal_Conductance_Data.csv')#reading in stomatal conductance data
#setting gs values of dead plants (NAs) to the minimum measured conductance
gs_dat$Conductance[is.na(gs_dat$Conductance)] <- min(gs_dat$Conductance,na.rm=T)
#converting time data to numeric, where the first measurement is time zero, and subsequent measurements are seconds after zero
dt <- paste(gs_dat$Date, gs_dat$Time, sep = ' ')
dt <- as.numeric(as.POSIXct(dt))
dt <- dt-min(dt)
gs_dat$seconds_elapsed <- dt
#creating a new treatment variable
Rx <- rep(NA,nrow(gs_dat))
Rx[gs_dat$Bin == 'A' | gs_dat$Bin == 'D' | gs_dat$Bin == 'G' | gs_dat$Bin == 'J' | gs_dat$Bin == 'M'] <- 'Drought'
Rx[gs_dat$Bin == 'B' | gs_dat$Bin == 'E' | gs_dat$Bin == 'H' | gs_dat$Bin == 'K' | gs_dat$Bin == 'N'] <- 'Control'
Rx[gs_dat$Bin == 'C' | gs_dat$Bin == 'F' | gs_dat$Bin == 'I' | gs_dat$Bin == 'L' | gs_dat$Bin == 'O'] <- 'Flood'
gs_dat$Rx <- Rx
#quick visualizations
boxplot(Conductance ~ Species, data = gs_dat)
boxplot(Conductance ~ Species*Rx, data = gs_dat)
colnames(gs_dat)
#creating a unique ID for each plant
plant_ID <- paste(gs_dat$Bin,gs_dat$Species,sep='')
plant_ID
gs_dat$plant_ID <- plant_ID
gs_mod <- lme(Conductance ~ Species*Rx*seconds_elapsed + Leaf.Temp + (1|Bin) + (1|plant_ID), data = gs_dat)
#mixed effects models to account for repeated measures, nested design (bin as random effect), and leaf temperature
library(nlme)
gs_mod <- lme(Conductance ~ Species*Rx*seconds_elapsed + Leaf.Temp + (1|Bin) + (1|plant_ID), data = gs_dat)
gs_dat$Leaf.Temp
#mixed effects models to account for repeated measures, nested design (bin as random effect), and leaf temperature
#!#!#! remove the following line after getting CERE leaf temp data
test_dat <- gs_dat[-c(77:92),]
gs_mod <- lme(Conductance ~ Species*Rx*seconds_elapsed + Leaf.Temp + (1|Bin) + (1|plant_ID), data = test_dat)
test_dat$Species
gs_mod <- lme(Conductance ~ Species*Rx + Leaf.Temp + (1|Bin) + (1|plant_ID), data = test_dat)
test_dat <- test_dat[test_dat$Species != 'SAGO',]
gs_mod <- lme(Conductance ~ Species*Rx + Leaf.Temp + (1|Bin) + (1|plant_ID), data = test_dat)
gs_mod <- lme(Conductance ~ Leaf.Temp + (1|Bin) + (1|plant_ID), data = test_dat)
test_dat$Leaf.Temp
